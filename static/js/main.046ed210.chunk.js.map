{"version":3,"sources":["index.css","App.css","App.js","serviceWorker.js","index.js"],"names":["module","exports","root","App","App-logo","App-logo-spin","App-header","App-link","state","idOutFolder","idInFolder","isLoading","toRepeatValue","handleChangeInput","e","target","id","_this","setState","value","handleChangeSelect","console","log","handleClick","script","run","withSuccessHandler","moveFoldersAndFiles","setTriggerAtHours","react_default","a","createElement","className","this","LinearProgress","Icon","fontSize","style","color","TextField","label","type","margin","onChange","FormControl","width","InputLabel","htmlFor","Select","MenuItem","Button","variant","onClick","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.046ed210.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"root\":\"index__root__4PyOE\",\"App\":\"index__App__25spO\",\"App-logo\":\"index__App-logo__13boJ\",\"App-logo-spin\":\"index__App-logo-spin__3YoN-\",\"App-header\":\"index__App-header__3vAv1\",\"App-link\":\"index__App-link__l-R5D\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"App\":\"App__App__1o-Fp\",\"App-logo\":\"App__App-logo__3JCPt\",\"App-logo-spin\":\"App__App-logo-spin__RvI1J\",\"App-header\":\"App__App-header__3iH8L\",\"App-link\":\"App__App-link__13fTZ\"};","import React from 'react';\nimport './App.css';\nimport Button from '@material-ui/core/Button';\nimport Icon from '@material-ui/core/Icon';\nimport TextField from '@material-ui/core/TextField';\nimport Select from '@material-ui/core/Select';\nimport FormControl from '@material-ui/core/FormControl';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport LinearProgress from '@material-ui/core/LinearProgress';\n\nclass App extends React.Component {\n  state = {\n    idOutFolder: null,\n    idInFolder: null,\n    isLoading: false,\n    toRepeatValue: 0\n  };\n  handleChangeInput = e => {\n    if (e.target.id === 'idOutFolder') {\n      this.setState({ idOutFolder: e.target.value });\n    }\n    if (e.target.id === 'idInFolder') {\n      this.setState({ idInFolder: e.target.value });\n    }\n  };\n  handleChangeSelect = e => {\n    console.log(e.target);\n    this.setState({ toRepeatValue: e.target.value });\n  };\n  handleClick = e => {\n    this.setState({ isLoading: true });\n    'google'.script.run\n      .withSuccessHandler(() => {\n        this.setState({ isLoading: false });\n      })\n      .moveFoldersAndFiles(this.state.idOutFolder, this.state.idInFolder);\n    'google'.script.run.setTriggerAtHours(this.state.toRepeatValue);\n  };\n\n  render() {\n    return (\n      <div className=\"App\">\n        {this.state.isLoading ? <LinearProgress /> : null}\n\n        <h3>Перенос дирректорий</h3>\n        <div>\n          <Icon fontSize=\"large\" style={{ fontSize: 50, color: '#5f6368' }}>\n            folder_shared\n          </Icon>\n          <Icon fontSize=\"large\" style={{ fontSize: 40, color: '#5f6368' }}>\n            arrow_right_alt\n          </Icon>\n          <Icon fontSize=\"large\" style={{ fontSize: 50, color: '#5f6368' }}>\n            folder_open\n          </Icon>\n          <div>\n            <TextField\n              id=\"idOutFolder\"\n              label=\"Из ID папки\"\n              type=\"search\"\n              margin=\"normal\"\n              onChange={this.handleChangeInput}\n            />\n          </div>\n          <div>\n            <TextField\n              id=\"idInFolder\"\n              label=\"В ID папки\"\n              type=\"search\"\n              margin=\"normal\"\n              onChange={this.handleChangeInput}\n            />\n          </div>\n        </div>\n        <div>\n          <FormControl style={{ width: '196px', margin: '15px' }}>\n            <InputLabel htmlFor=\"age-simple\">Повторять</InputLabel>\n            <Select\n              value={this.state.toRepeatValue}\n              onChange={this.handleChangeSelect}\n            >\n              <MenuItem value={0}>\n                <em>Нет</em>\n              </MenuItem>\n              <MenuItem value={1}>Каждый час</MenuItem>\n              <MenuItem value={2}>Раз в 3 часа</MenuItem>\n              <MenuItem value={6}>Раз в 6 часа</MenuItem>\n              <MenuItem value={12}>Раз в 12 часа</MenuItem>\n              <MenuItem value={24}>Каждый день</MenuItem>\n            </Select>\n          </FormControl>\n        </div>\n        <div>\n          <Button\n            variant=\"outlined\"\n            color=\"primary\"\n            style={{ margin: '60px 5px' }}\n            onClick={this.handleClick}\n          >\n            Переместить\n          </Button>\n        </div>\n      </div>\n    );\n  }\n}\n//   const [age, setAge] = [1, 2];\n//   const [open, setOpen] = React.useState(false);\n\n//   function handleChange() {}\n//   function handleClose() {\n//     setOpen(false);\n//   }\n\n//   function handleOpen() {\n//     setOpen(true);\n//   }\n//   function handleChangeInput(event) {\n//     console.log(event.target.value);\n//   }\n\n//   return (\n//     <div className=\"App\">\n//       <h3>Перенос дирректорий</h3>\n//       <div>\n//         <Icon fontSize=\"large\" style={{ fontSize: 50, color: '#282c34' }}>\n//           folder_shared\n//         </Icon>\n//         <Icon fontSize=\"large\" style={{ fontSize: 40, color: '#282c34' }}>\n//           arrow_right_alt\n//         </Icon>\n//         <Icon fontSize=\"large\" style={{ fontSize: 50, color: '#282c34' }}>\n//           folder_open\n//         </Icon>\n//         <div>\n//           <TextField\n//             id=\"idOutFolder\"\n//             label=\"Из ID папки\"\n//             type=\"search\"\n//             margin=\"normal\"\n//             onChange={handleChangeInput}\n//           />\n//         </div>\n//         <div>\n//           <TextField\n//             id=\"idШтFolder\"\n//             label=\"В ID папки\"\n//             type=\"search\"\n//             margin=\"normal\"\n//           />\n//         </div>\n//       </div>\n//       <div>\n//         <Button\n//           variant=\"outlined\"\n//           color=\"primary\"\n//           style={{ margin: '60px 5px' }}\n//         >\n//           Переместить\n//         </Button>\n//       </div>\n//     </div>\n//   );\n// }\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}